.clearer{:style=>"clear:both"}

  .subtitle{:style=>"margin-top:-20px; font-size: 125%;"}
    %a{:href=>"/about"} Truly open tools for data.
  
  .header_byline

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Steal this server!
    %a{:href=>"http://www.datasciencetoolkit.org/developerdocs#setup"} 
      Grab this entire site as a free, self-contained, ready-to-run VM
    %br
    %br
    <strong>Independence</strong> - Never worry about the provider going offline, or charging once you're hooked.
    %br
    %br
    <strong>Security</strong> - Run on your intranet, so customer information stays within the firewall.
    %br
    %br
    <strong>Scalability</strong> - No API limits. Run a cluster of as many instances as you need.
    %br
    %br
    
  %div
    %h3 Improve your data skills (and keep this server running!) by buying my guides:
  %div{:style=>"text-align: center;"}
    %div{:style=>"float: left; width: 300px; font-size: 125%"}
      %a{:href=>"http://shop.oreilly.com/product/0636920018254.do"}
        %img{:src=>"http://akamaicovers.oreilly.com/images/0636920018254/cat.gif"}
      %br
      %a{:href=>"http://shop.oreilly.com/product/0636920018254.do"}
        Data Source Handbook
    %div{:style=>"float: left; width: 300px; font-size: 125%"}
      %a{:href=>"http://shop.oreilly.com/product/0636920022466.do"}
        %img{:src=>"http://akamaicovers.oreilly.com/images/0636920022466/cat.gif"}
      %br
      %a{:href=>"http://shop.oreilly.com/product/0636920022466.do"}
        Big Data Glossary
    %div{:style=>"clear:both;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Street Address to Coordinates
    API: 
    %a{:href=>"/developerdocs#street2coordinates"} /street2coordinates
    %br
    Street Address to Location calculates the latitude/longitude coordinates for a postal address.
    %br
    Currently only the US and UK have street-level detail.
    %br

  .trystreet2coordinates{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some addresses into the box below to see what locations it finds.

  %textarea#street2coordinatestext{:style=>"width: 600px; margin-top: 10px; float: left;"}

  %form{:target=>"_new", :action=>"/file2method", :method=>"post", :enctype=>"multipart/form-data", :display=>"inline"}
    %input#street2coordinatesfile{:type=>"file", :name=>"inputfile", :style=>"width:120px; margin-top: 10px;"}
    %input{:type=>"hidden", :name=>"method", :value=>"street2coordinates"}
    %br
    %input#uploadstreet2coordinatestext.button{:type=>"submit", :value=>"Locate Addresses", :style=>"width:150px; height:35px; font-size: 125%;"}
  
  #street2coordinatesresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Google-style Geocoder
    API: 
    %a{:href=>"/developerdocs#googlestylegeocoder"} /maps/api/geocode/json
    %br
    Are you currently using Google's geocoding API and want to switch? Replace maps.googleapis.com with the address of a DSTK server and your code should work without changes. For example:
    %br
    %a{:href=>"http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA"}
      http://maps.googleapis.com/maps/api/geocode/json?sensor=false
      %br
      &address=1600+Amphitheatre+Parkway,+Mountain+View,+CA
    %br
    just becomes
    %br
    %a{:href=>"http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA"}
      http://www.datasciencetoolkit.org/maps/api/geocode/json?sensor=false
      %br
      &address=1600+Amphitheatre+Parkway,+Mountain+View,+CA
    %br
    Reverse geocoding is not supported through this interface, but 
    %a{:href=>"/developerdocs#coordinates2politics"}coordinates2politics
    may be useful as an open alternative. XML output is not supported, only JSON and JSONP.

  .trygooglestylegeocoder{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Enter an address into the box below to see what locations it finds.

  %form#googlestylegeocoderform
    %input#googlestylegeocodertext{:style=>"width: 600px; margin-top: 10px; float: left;", :value=>"1600 Amphitheatre Parkway, Mountain View, CA"}
    
    %input#uploadgooglestylegeocodertext.button{:type=>"submit", :value=>"Locate Addresses", :style=>"width:150px; height:35px; font-size: 125%;"}

  #googlestylegeocoderresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Coordinates to Political Areas
    API: 
    %a{:href=>"/developerdocs#coordinates2politics"} /coordinates2politics
    %br
    Returns the country, region, state, county, constituencies and neighborhood a point is inside.
    %br
  .trycoordinates2politics{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some coordinates into the box below to see what it finds.

  %textarea#coordinates2politicstext{:style=>"width: 600px; margin-top: 10px; float:left;"} 37.769456,-122.429128

  %form{:target=>"_new", :action=>"/file2method", :method=>"post", :enctype=>"multipart/form-data", :display=>"inline"}
    %input#coordinates2politicsfile{:type=>"file", :name=>"inputfile", :style=>"width:120px; margin-top: 10px;"}
    %input{:type=>"hidden", :name=>"method", :value=>"coordinates2politics"}
    %br
    %input#uploadcoordinates2politicstext.button{:type=>"submit", :value=>"Find", :style=>"width:150px; height:35px; font-size: 125%;"}

  #coordinates2politicsresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Text to Sentiment
    API: 
    %a{:href=>"/developerdocs#text2sentiment"} /text2sentiment
    %br
    Estimates whether a piece of text comment is complimentary or negative.
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste your text into the box below to estimate sentiment.

  %textarea#text2sentimenttext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext2sentiment.button{:style=>"width:150px; font-size: 125%;"} Find Sentiment

  #text2sentimentresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Coordinates to Statistics
    API: 
    %a{:href=>"/developerdocs#coordinates2statistics"} /coordinates2statistics
    %br
    Returns the population density, elevation, terrain, climate, and other conditions at a point.
    %br
  .trycoordinates2statistics{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some coordinates into the box below to see what it finds.

  %textarea#coordinates2statisticstext{:style=>"width: 600px; margin-top: 10px; float:left;"} 37.769456,-122.429128

  %input#uploadcoordinates2statisticstext.button{:type=>"submit", :value=>"Find", :style=>"width:150px; height:35px; font-size: 125%;"}

  #coordinates2statisticsresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Geodict
    API: 
    %a{:href=>"/developerdocs#geodict"} /v1/document
    %br
    Geodict pulls country, city and region names from unstructured English text, and returns their coordinates.
    %br
    It emulates the interface to 
    %a{:href=>"http://developer.yahoo.com/geo/placemaker/guide/web-service.html "}Yahoo's Placemaker
    , so switching should just mean changing 'http://wherein.yahooapis.com/' to 'http://www.datasciencetoolkit.org/' in your current code. 
  
  .trygeodict{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some text into the box below to see what locations it finds.

  %textarea#text{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext.button{:style=>"width:150px; font-size: 125%;"} Extract Locations
  
  #results{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 IP Address to Coordinates
    API: 
    %a{:href=>"/developerdocs#ip2coordinates"} /ip2coordinates
    %br
    IP Address to Location calculates country, state, city and latitude/longitude coordinates for IP addresses.
    %br
    
  .tryip2coordinates{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some IP addresses into the box below to see what locations it finds.

  %textarea#ip2coordinatestext{:style=>"width: 600px; margin-top: 10px; float:left;"} 67.169.73.113

  %form{:target=>"_new", :action=>"/file2method", :method=>"post", :enctype=>"multipart/form-data", :display=>"inline"}
    %input#ip2coordinatesfile{:type=>"file", :name=>"inputfile", :style=>"width:120px; margin-top: 10px;"}
    %input{:type=>"hidden", :name=>"method", :value=>"ip2coordinates"}
    %br
    %input#uploadip2coordinates.button{:type=>"submit", :value=>"Locate IPs", :style=>"width:150px; height:35px; font-size: 125%;"}
  
  #ip2coordinatesresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Text to Sentences
    API: 
    %a{:href=>"/developerdocs#text2sentences"} /text2sentences
    %br
    Removes the parts of the text that seem to be boilerplate, leaving the real sentences.    
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste a large chunk of text into the box below to see what sentences it identifies.

  %textarea#text2sentencestext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext2sentences.button{:style=>"width:150px; font-size: 125%;"} Get Sentences
  
  #text2sentencesresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 HTML to Text
    API: 
    %a{:href=>"/developerdocs#html2text"} /html2text
    %br
    Returns the full text that would actually be displayed in the browser when an HTML document was rendered.
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste your HTML into the box below to convert it into plain text.

  %textarea#html2texttext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadhtml2text.button{:style=>"width:150px; font-size: 125%;"} Get Text
  
  #html2textresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 HTML to Story
    API: 
    %a{:href=>"/developerdocs#html2story"} /html2story
    %br
    Takes an HTML document representing a news article or similar page, and extracts just the story text.
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste your HTML into the box below to grab the story text.

  %textarea#html2storytext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadhtml2story.button{:style=>"width:150px; font-size: 125%;"} Extract Story
  
  #html2storyresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Text to People
    API: 
    %a{:href=>"/developerdocs#text2people"} /text2people
    %br
    Spots text fragments that look like people's names or titles, and guesses their gender where possible.
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste your text into the box below to extract people's names.

  %textarea#text2peopletext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext2people.button{:style=>"width:150px; font-size: 125%;"} Find Names
  
  #text2peopleresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Text to Times
    API: 
    %a{:href=>"/developerdocs#text2times"} /text2times
    %br
    Spots text fragments that look like times or dates, and converts them into a standard form.
    %br
  .try{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste your text into the box below to extract times and dates.

  %textarea#text2timestext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext2times.button{:style=>"width:150px; font-size: 125%;"} Find Times
  
  #text2timesresults{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 File to Text
    API: 
    %a{:href=>"/developerdocs#file2text"} /file2text
    %br
    Converts PDFs, Word Documents, Excel Spreadsheets to text.
    %br
    Recovers text from JPEG, PNG or TIFF images of scanned documents.

  .tryfile2text{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Upload a file to see what text it finds.

  %form{:target=>"_new", :action=>"/file2text", :method=>"post", :enctype=>"multipart/form-data", :display=>"inline"}
    %input{:type=>"file", :name=>"inputfile"}
    %br
    %input.button{:type=>"submit", :value=>"Extract Text", :style=>"font-size:125%; height: 35px;"}

%script{:src=>"/scripts/jquery.exptextarea.js", :type=>"text/javascript"}
:javascript
  $(function() {

    $('textarea').expandingTextArea()

    // This creates the Data Science Toolkit object we'll be using to 
    // make API calls with.
    // By default it uses the datasciencetoolkit.org server, but if you
    // set up your own, you can just switch the URL in this constructor.
    // In this case, we're setting it to an empty string, so that it will
    // use the current server.
    var dstk = $.DSTK({apiBase:''});

    $('#uploadtext').click(function() {
      var text = $('#text').val();
      if (text.length<1) {
        $('#results').html("No text found in input box.");
        return;
      }

      dstk.text2places(text, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#results')
          .text(result.error);
          return;
        }

        $('#results').empty();

        if (result.length<1) {
          $('#results')
          .text('No locations found');
          return;
        }

        for (var resultIndex in result) {
          var place = result[resultIndex];

          var matchedString = place['matched_string'];
          var lat = place['latitude'];
          var lon = place['longitude'];
          var type = place['type'];
          var name = place['name'];

          var html = 
            '<div>"'
            +matchedString
            +'" matches the '
            +type.toLowerCase()
            +' '
            +name
            +' at <a href="http://maps.google.com/maps?q='
            +lat
            +','
            +lon
            +'">'
            +lat
            +','
            +lon
            +'</a>'
            +'</div>';
          
          $('#results').append($(html));
        }
      })
    });

    // Handle the IP lookup test console
    $('#uploadip2coordinates').click(function() {
      var text = $('#ip2coordinatestext').val();
      var file = $('#ip2coordinatesfile').val();
      var hasFile = ((typeof file !== 'undefined') && (file !== null) && (file!==''));
      var isDefaultText = (text=='67.169.73.113')
      var isEmptyText = (text.length<1)
      
      if (hasFile && (isDefaultText||isEmptyText)) {
        return true;
      } else if (isEmptyText) {
        $('#ip2coordinatesresults').html("No text found in input box.");
        return false;
      }

      text = text.replace("\n", ",");
      text = text.replace(" ", ",");
      ips = text.split(',');

      dstk.ip2coordinates(ips, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#results')
          .text(result.error);
          return;
        }
            
        $('#ip2coordinatesresults').empty()
        
        for (var ip in result) {
          var info = result[ip];
          
          var html;
          if (info == null) {
            html = "<div>"+ip+" - NA</div>"
          } else {
          
            var lat = info['latitude'];
            var lon = info['longitude'];
            var country = info['country_name'];
            var region = info['region'];
            var city = info['locality'];
            var postal_code = info['postal_code'];
            
            html = 
              '<div>'
              +ip
              +' - '
              +city
              +', '
              +region
              +' '
              +postal_code
              +', '
              +country
              +' '
              +name
              +' at <a href="http://maps.google.com/maps?q='
              +lat
              +','
              +lon
              +'">'
              +lat
              +','
              +lon
              +'</a>'
              +'</div>';
          }
          
          $('#ip2coordinatesresults').append($(html));
        }
      });
      
      return false;
    });

    // Handle the street address test console
    $('#uploadstreet2coordinatestext').click(function() {
      var text = $('#street2coordinatestext').val();
      if (text.length<1) {
        var file = $('#street2coordinatesfile').val();
        if ((typeof file !== 'undefined') && (file !== null) && (file != '')) {
          return true;
        } else {
          $('#street2coordinatesresults').html("No text found in input box.");
          return false;
        }
      }

      addresses = text.split("\n");
      dstk.street2coordinates(addresses, function(result) {
      
        if (typeof result['error'] !== 'undefined') {
          $('#street2coordinatesresults')
          .text(result.error);
          return;
        }

        $('#street2coordinatesresults').empty()
        
        for (var address in result) {
          var info = result[address];
          
          var html;
          if (info == null) {
            html = "<div>"+address+" - NA</div>"
          } else {
          
            var lat = info['latitude'];
            var lon = info['longitude'];
            var country = info['country_name'];
            var region = info['region'];
            var city = info['locality'];
            var street_address = info['street_address'];
            
            if ($('#coordinates2politicstext').val()=='') {
              $('#coordinates2politicstext').val(lat+','+lon);
            }
            
            html = 
              '<div>"'
              +address
              +'" - '
              +street_address
              +', '
              +city
              +', '
              +region
              +', '
              +country
              +' at <a href="http://maps.google.com/maps?q='
              +lat
              +','
              +lon
              +'">'
              +lat
              +','
              +lon
              +'</a>'
              +'</div>';
          }
          
          $('#street2coordinatesresults').append($(html));
        }
      });
    
      return false;
    });

    // Handle the Google-style geocoder test console
    $('#googlestylegeocoderform').submit(function() {
      var text = $('#googlestylegeocodertext').val();
      if (text.length<1) {
        $('#googlestylegeocoderresults').html("No text found in input box.");
        return false;
      }

      dstk.googlestylegeocoder(text, function(result) {
      
        if ((typeof result['results'] === 'undefined') ||
            (result['results'].length == 0)) {
          $('#googlestylegeocoderresults')
          .text('No results found');
          return;
        }

        $('#googlestylegeocoderresults').empty()
        
        var jsonString = $.toJSON(result['results']);
        $('#googlestylegeocoderresults').text(jsonString);
      });
    
      return false;
    });

    // Handle the reverse geocoding test console
    $('#uploadcoordinates2politicstext').click(function() {
      var text = $('#coordinates2politicstext').val();
      var file = $('#coordinates2politicsfile').val();
      var hasFile = ((typeof file !== 'undefined') && (file !== null) && (file!==''));
      var isDefaultText = (text=='37.769456,-122.429128')
      var isEmptyText = (text.length<1)
      
      if (hasFile && (isDefaultText||isEmptyText)) {
        return true;
      } else if (isEmptyText) {
        $('#coordinates2politicsresults').html("No text found in input box.");
        return false;
      }

      coordinatesList = text.split("\n");
      
      var coordinatesObjects = [];
      for (var index in coordinatesList) {
        var coordinates = coordinatesList[index].split(',');
        var coordinatesObject = [coordinates[0],coordinates[1]]
        coordinatesObjects.push(coordinatesObject);
      }
      
      dstk.coordinates2politics(coordinatesObjects, function(result) {

        if (typeof result['error'] !== 'undefined') {
          $('#coordinates2politicsresults')
          .text(result.error);
          return;
        }

        $('#coordinates2politicsresults').empty()
        
        for (var index in result) {
          var info = result[index];
          
          var location = info['location'];
          var politics = info['politics'];
          
          var html = '<div>';
          html += '<a href="http://maps.google.com/maps?q='
            +location.latitude
            +','
            +location.longitude
            +'">'
            +location.latitude
            +', '
            +location.longitude
            +'</a> - ';
          
          if (politics == null) {
            html += "NA";
          } else {
          
            for (var politicsIndex in politics) {
              var politic = politics[politicsIndex];
            
              var name = politic['name'];
              var code = politic['code'];
              var type = politic['friendly_type'];
              
              html += 
                '('
                +name
                +', '
                +code
                +', '
                +type
                +') ';
              }
          }
          html += '</div>'
          
          $('#coordinates2politicsresults').append($(html));
        }
      })
      
      return false;
    });
    
    $('#uploadtext2sentences').click(function() {
      var text = $('#text2sentencestext').val();
      if (text.length<1) {
        $('#text2sentencesresults').html("No text found in input box.");
        return;
      }
      
      dstk.text2sentences(text, function(result) {
        var html = result['sentences'].replace(/\n+/g, '<br/>');
        $('#text2sentencesresults').html(html);
      });
    });

    $('#uploadhtml2text').click(function() {
      var text = $('#html2texttext').val();
      if (text.length<1) {
        $('#html2textresults').html("No text found in input box.");
        return;
      }
      
      dstk.html2text(text, function(result) {
        var html = result['text'].replace(/\n+/g, '<br/>');
        $('#html2textresults').html(html);
      });
    });

    $('#uploadhtml2story').click(function() {
      var text = $('#html2storytext').val();
      if (text.length<1) {
        $('#html2storyresults').html("No text found in input box.");
        return;
      }
      
      dstk.html2story(text, function(result) {
        var html = result['story'].replace(/\n+/g, '<br/>');
        $('#html2storyresults').html(html);
      });
    });

    $('#uploadtext2people').click(function() {
      var text = $('#text2peopletext').val();
      if (text.length<1) {
        $('#text2peopleresults').html("No text found in input box.");
        return;
      }

      dstk.text2people(text, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#text2peopleresults')
          .text(result.error);
          return;
        }

        $('#text2peopleresults').empty();

        if (result.length<1) {
          $('#text2peopleresults')
          .text('No locations found');
          return;
        }

        for (var resultIndex in result) {
          var person = result[resultIndex];

          var matchedString = person['matched_string'];
          var gender = person['gender'];
          var genderString;
          if (gender=='m') {
            genderString = '- Male';
          } else if (gender=='f') {
            genderString = '- Female';
          } else {
            genderString = '';
          }
          var ageString = '';
          if ((typeof person['likely_age'] !== 'undefined') &&
            (person['likely_age'])) {
            var likelyAge = person['likely_age'];
            ageString = ', likely ' + likelyAge + ' years old';
          }
          var ethnicityString = '';
          if (person['ethnicity'] !== null) {
            var ethnicity = person['ethnicity'];
            ethnicityString += ' - Americans with this surname are: ';
            ethnicityString += ethnicity['percentage_white'] + '% white, '
            ethnicityString += ethnicity['percentage_black'] + '% black, '
            ethnicityString += ethnicity['percentage_hispanic'] + '% hispanic, '
            ethnicityString += ethnicity['percentage_asian_or_pacific_islander'] + '% Asian or Pacific Islander, '
            ethnicityString += ethnicity['percentage_american_indian_or_alaska_native'] + '% American Indian or Alaskan Native'
          }

          var html = 
            '<div>'
            +matchedString
            +genderString
            +ageString
            +ethnicityString
            +'</div>';
          
          $('#text2peopleresults').append($(html));
        }
      })
    });

    $('#uploadtext2times').click(function() {
      var text = $('#text2timestext').val();
      if (text.length<1) {
        $('#text2timesresults').html("No text found in input box.");
        return;
      }

      dstk.text2times(text, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#text2timesresults')
          .text(result.error);
          return;
        }

        $('#text2timesresults').empty();

        if (result.length<1) {
          $('#text2timesresults')
          .text('No times found');
          return;
        }

        for (var resultIndex in result) {
          var time = result[resultIndex];

          var matchedString = time['matched_string'];
          var timeString = time['time_string'];

          var html = 
            '<div>'
            +matchedString
            +' = '
            +timeString
            +'</div>';
          
          $('#text2timesresults').append($(html));
        }
      })
    });

    $('#uploadtext2sentiment').click(function() {
      var text = $('#text2sentimenttext').val();
      if (text.length<1) {
        $('#text2sentimentresults').html("No text found in input box.");
        return;
      }

      dstk.text2sentiment(text, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#text2sentimentresults')
          .text(result.error);
          return;
        }

        $('#text2sentimentresults').empty();

        if (typeof result['score'] === 'undefined') {
          $('#text2sentimentresults')
          .text('Error finding sentiment');
          return;
        }
        
        var score = result['score'];
        var lookup = [
          '-5 (Extremely negative)',
          '-4 (Very negative)',
          '-3 (Negative)',
          '-2 (Somewhat negative)',
          '-1 (Mildly negative)',
          '0 (Neutral)',
          '+1 (Mildly positive)',
          '+2 (Somewhat positive)',
          '+3 (Positive)',
          '+4 (Very positive)',
          '+5 (Extremely positive)',
        ];
        var html = lookup[score + 5];

        $('#text2sentimentresults').append(html);

      })
    });

    $('#uploadcoordinates2statisticstext').click(function() {
      var text = $('#coordinates2statisticstext').val();
      var isEmptyText = (text.length<1)
      
      if (isEmptyText) {
        $('#coordinates2statisticsresults').html("No text found in input box.");
        return false;
      }

      coordinatesList = text.split("\n");
      
      var coordinatesObjects = [];
      for (var index in coordinatesList) {
        var coordinates = coordinatesList[index].split(',');
        var coordinatesObject = [coordinates[0],coordinates[1]]
        coordinatesObjects.push(coordinatesObject);
      }
      
      dstk.coordinates2statistics(coordinatesObjects, function(results) {

        if (typeof results['error'] !== 'undefined') {
          $('#coordinates2statisticsresults')
          .text(results.error);
          return;
        }

        $('#coordinates2statisticsresults').empty()
        
        for (var index in results) {
          var result = results[index];
          var location = result['location'];
          var statistics = result['statistics'];
          
          var latitude = location['latitude'];
          var longitude = location['longitude'];
          var header = '<h3>';
          header += latitude;
          header += ', ';
          header += longitude;
          header += '</h3>';
          $('#coordinates2statisticsresults').append(header);

          for (var statistic in statistics) {
            var info = statistics[statistic];
            var value = info['value'];
            var description = info['description'];
            var units = info['units'];
            if (typeof info['proportion_of'] !== 'undefined') {
              value = (Math.round(value * 1000) / 10) + '%';
            }

            var html = '<div>';
            html += '<b>';
            html += value + ' ';
            if (typeof units !== 'undefined') {
              html += units + ' ';
            }
            html += '</b>';
            html += ' - ' + description;
            html += '</div>'
            
            $('#coordinates2statisticsresults').append(html);
          }
        }
      })
      
      return false;
    });

  });
